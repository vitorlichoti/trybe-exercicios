//***PARTE 1***

/*üöÄ 1 - Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
      Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function.
      Modifique as concatena√ß√µes para template literals.
      Copie o c√≥digo abaixo.*/
function testingScope(escopo) {
  if (escopo === true) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
    console.log(ifScope);
  } else {
    let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }
}

testingScope(true);


/*üöÄ 2 - Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
    Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
    B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todoarray.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.*/
const oddsAndEvens = [13, 3, 4, 10, 7, 2];

console.log(`[ ${oddsAndEvens[5]}, ${oddsAndEvens[1]}, ${oddsAndEvens[2]}, ${oddsAndEvens[4]}, ${oddsAndEvens[3]}, ${oddsAndEvens[0]} ]`);

const compareNumbers = (a, b) => a - b;
console.log(oddsAndEvens.sort(compareNumbers));


//***PARTE 2***

/*1 - Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
*/

// const factorial = n => {
//   (n < 2) ? n = 1 : fac = n; for(let i = n; i > 1; i -= 1) {fac *= i - 1;} return fac;
// }

// console.log(factorial(4));

//recursiva
const factorial = n => n > 1 ? n * factorial(n - 1) : 1;
console.log(factorial(4));

/*2 - Crie uma fun√ß√£o que receba uma frase e retorne qual a maior palavra.
*/

const longestWord = phrase => {
  let phraseSplit = phrase.split(' ');
  let biggestWord = ' ';

  for (const word of  phraseSplit) {
    if (word.length > biggestWord.length) {
      biggestWord = word;
    }
  }
  return biggestWord;
}

console.log(longestWord('Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu'));

/*3 - üöÄ Crie uma p√°gina que contenha:
          Um bot√£o ao qual ser√° associado um event listener;
          Uma vari√°vel clickCount no arquivo JavaScript que acumule o n√∫mero de clicks no bot√£o;
          Um campo no HTML que v√° atualizando a quantidade de clicks no bot√£o conforme a vari√°vel clickCount √© atualizada.
*/

// const getClickButton = document.getElementById('button');
// const getCounter = document.getElementById('counter');
// let count = 0;

// getClickButton.addEventListener('click', () => {
//   count ++;
//   getCounter.innerText = count;
// })

/*4 - üöÄ Crie um c√≥digo JavaScript com a seguinte especifica√ß√£o:
    Fun√ß√£o 1: Escreva uma fun√ß√£o que vai receber uma string como par√¢metro. Sua fun√ß√£o dever√° procurar pela letra x em uma string qualquer que voc√™ determinar e substituir pela string que voc√™ passou como par√¢metro. Sua fun√ß√£o deve retornar essa nova string.
    Exemplo:
    String determinada: "Tryber x aqui!"
    Par√¢metro: "Bebeto"
    Retorno: "Tryber Bebeto aqui!"
    Um array com escopo global, que √© o escopo do arquivo JS, nesse caso, contendo cinco strings com suas principais skills.
    */
    /*
    Fun√ß√£o 2: Escreva uma fun√ß√£o que vai receber a string retornada da Fun√ß√£o 1 como par√¢metro. Essa fun√ß√£o deve concatenar as skills do array global √† string que foi passada para a Fun√ß√£o 2 via par√¢metro. Voc√™ deve ordenar os skills em ordem alfab√©tica. Sua fun√ß√£o deve retornar essa nova string.
    Exemplo:
    "Tryber x aqui!
    Minhas cinco principais habilidades s√£o:
    JavaScript;
    HTML; ...
    #goTrybe".
*/

const array = ["Android", "iOS", "Architecture", "Teach", "Run"];

function buildSkillsPhrase (paramOne) {
    const fun1 = paramInner => (
      `Tryber ${paramInner} aqui!

      Tudo bem?`
    );

    let result = `${fun1(paramOne)}

    Minhas cinco principais habilidades s√£o:`;

    array.forEach((skill, index) =>
    result = `${result}

    - ${skill}`);

    result = `
    ${result}

    #goTrybe
    `;

    return result;
}

console.log(buildSkillsPhrase("Lucas"));